<?php

namespace samuelreichor\llmify\services;

use Craft;
use craft\base\Component;
use craft\caching\TagDependency;
use craft\elements\Entry;
use samuelreichor\llmify\Llmify;

class LlmifyService extends Component
{
    public const CACHE_TAG = 'llmify';

    /**
     * Processes HTML captured by the Twig tag or generated by an event.
     *
     * @param string $html
     * @param string|null $url The URL to use as the basis for the cache key.
     */
    public function process(string $html, ?string $url = null): void
    {
        // If no URL is provided, try to get it from the current request.
        if ($url === null) {
            $request = Craft::$app->getRequest();
            if ($request->getIsCpRequest() || $request->getIsConsoleRequest()) {
                return; // Cannot proceed without a URL in the backend.
            }
            $url = $request->getUrl();
        }

        $cacheKey = 'llmify_' . md5($url);
        $settings = Llmify::getInstance()->getSettings();
        Craft::$app->getCache()->set($cacheKey, $html, $settings->cacheTtl, new TagDependency(['tags' => self::CACHE_TAG]));
        Craft::info("Processed and cached content for URL: $url", 'llmify');
        Craft::info($html, 'llmify');
    }

    /**
     * Generates and processes HTML for a specific entry.
     *
     * @param Entry $entry
     */
    public function generateForEntry(Entry $entry): void
    {
        // IMPORTANT: You must define which template to render.
        // Replace 'path/to/your/template.twig' with the actual template path.
        $templatePath = '_partials/card'; 

        try {
            // Set the site's template mode
            $view = Craft::$app->getView();
            $originalMode = $view->getTemplateMode();
            $view->setTemplateMode($view::TEMPLATE_MODE_SITE);

            // Render the template with the entry passed as a variable
            $html = $view->renderTemplate($templatePath, ['entry' => $entry]);

            // Restore the original template mode
            $view->setTemplateMode($originalMode);

            // Now, reuse the existing process method, passing the entry's specific URL
            $this->process($html, $entry->url);

        } catch (\Throwable $e) {
            Craft::error('Failed to render template for llmify: ' . $e->getMessage(), __METHOD__);
        }
    }
}
